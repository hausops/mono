package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/hausops/mono/apps/dashboard-api/domain/property"
)

// CreateSingleFamilyProperty is the resolver for the createSingleFamilyProperty field.
func (r *mutationResolver) CreateSingleFamilyProperty(ctx context.Context, input property.CreateSingleFamilyPropertyInput) (*property.SingleFamilyProperty, error) {
	return r.PropertySvc.CreateSingleFamilyProperty(ctx, input)
}

// CreateMultiFamilyProperty is the resolver for the createMultiFamilyProperty field.
func (r *mutationResolver) CreateMultiFamilyProperty(ctx context.Context, input property.CreateMultiFamilyPropertyInput) (*property.MultiFamilyProperty, error) {
	return r.PropertySvc.CreateMultiFamilyProperty(ctx, input)
}

// UpdateSingleFamilyProperty is the resolver for the updateSingleFamilyProperty field.
func (r *mutationResolver) UpdateSingleFamilyProperty(ctx context.Context, id string, input property.UpdateSingleFamilyPropertyInput) (*property.SingleFamilyProperty, error) {
	return r.PropertySvc.UpdateSingleFamilyPropertyByID(ctx, id, input)
}

// UpdateMultiFamilyProperty is the resolver for the updateMultiFamilyProperty field.
func (r *mutationResolver) UpdateMultiFamilyProperty(ctx context.Context, id string, input property.UpdateMultiFamilyPropertyInput) (*property.MultiFamilyProperty, error) {
	return r.PropertySvc.UpdateMultiFamilyPropertyByID(ctx, id, input)
}

// DeleteProperty is the resolver for the deleteProperty field.
func (r *mutationResolver) DeleteProperty(ctx context.Context, id string) (property.Property, error) {
	return r.PropertySvc.DeleteByID(ctx, id)
}

// Property is the resolver for the property field.
func (r *queryResolver) Property(ctx context.Context, id string) (property.Property, error) {
	panic(fmt.Errorf("not implemented: Property - property"))
}

// Properties is the resolver for the properties field.
func (r *queryResolver) Properties(ctx context.Context) ([]property.Property, error) {
	return r.PropertySvc.FindAll(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
