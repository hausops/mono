// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pb/property.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Property_Create_FullMethodName   = "/hausops.mono.services.property.Property/Create"
	Property_FindByID_FullMethodName = "/hausops.mono.services.property.Property/FindByID"
	Property_List_FullMethodName     = "/hausops.mono.services.property.Property/List"
	Property_Update_FullMethodName   = "/hausops.mono.services.property.Property/Update"
	Property_Delete_FullMethodName   = "/hausops.mono.services.property.Property/Delete"
)

// PropertyClient is the client API for Property service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyClient interface {
	Create(ctx context.Context, in *PropertyRequest, opts ...grpc.CallOption) (*PropertyResponse, error)
	FindByID(ctx context.Context, in *PropertyIDRequest, opts ...grpc.CallOption) (*PropertyResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PropertyListResponse, error)
	Update(ctx context.Context, in *PropertyRequest, opts ...grpc.CallOption) (*PropertyResponse, error)
	Delete(ctx context.Context, in *PropertyIDRequest, opts ...grpc.CallOption) (*PropertyResponse, error)
}

type propertyClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyClient(cc grpc.ClientConnInterface) PropertyClient {
	return &propertyClient{cc}
}

func (c *propertyClient) Create(ctx context.Context, in *PropertyRequest, opts ...grpc.CallOption) (*PropertyResponse, error) {
	out := new(PropertyResponse)
	err := c.cc.Invoke(ctx, Property_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) FindByID(ctx context.Context, in *PropertyIDRequest, opts ...grpc.CallOption) (*PropertyResponse, error) {
	out := new(PropertyResponse)
	err := c.cc.Invoke(ctx, Property_FindByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PropertyListResponse, error) {
	out := new(PropertyListResponse)
	err := c.cc.Invoke(ctx, Property_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) Update(ctx context.Context, in *PropertyRequest, opts ...grpc.CallOption) (*PropertyResponse, error) {
	out := new(PropertyResponse)
	err := c.cc.Invoke(ctx, Property_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) Delete(ctx context.Context, in *PropertyIDRequest, opts ...grpc.CallOption) (*PropertyResponse, error) {
	out := new(PropertyResponse)
	err := c.cc.Invoke(ctx, Property_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyServer is the server API for Property service.
// All implementations must embed UnimplementedPropertyServer
// for forward compatibility
type PropertyServer interface {
	Create(context.Context, *PropertyRequest) (*PropertyResponse, error)
	FindByID(context.Context, *PropertyIDRequest) (*PropertyResponse, error)
	List(context.Context, *emptypb.Empty) (*PropertyListResponse, error)
	Update(context.Context, *PropertyRequest) (*PropertyResponse, error)
	Delete(context.Context, *PropertyIDRequest) (*PropertyResponse, error)
	mustEmbedUnimplementedPropertyServer()
}

// UnimplementedPropertyServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyServer struct {
}

func (UnimplementedPropertyServer) Create(context.Context, *PropertyRequest) (*PropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPropertyServer) FindByID(context.Context, *PropertyIDRequest) (*PropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedPropertyServer) List(context.Context, *emptypb.Empty) (*PropertyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPropertyServer) Update(context.Context, *PropertyRequest) (*PropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPropertyServer) Delete(context.Context, *PropertyIDRequest) (*PropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPropertyServer) mustEmbedUnimplementedPropertyServer() {}

// UnsafePropertyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyServer will
// result in compilation errors.
type UnsafePropertyServer interface {
	mustEmbedUnimplementedPropertyServer()
}

func RegisterPropertyServer(s grpc.ServiceRegistrar, srv PropertyServer) {
	s.RegisterService(&Property_ServiceDesc, srv)
}

func _Property_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Property_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).Create(ctx, req.(*PropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Property_FindByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).FindByID(ctx, req.(*PropertyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Property_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Property_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).Update(ctx, req.(*PropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Property_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).Delete(ctx, req.(*PropertyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Property_ServiceDesc is the grpc.ServiceDesc for Property service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Property_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hausops.mono.services.property.Property",
	HandlerType: (*PropertyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Property_Create_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _Property_FindByID_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Property_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Property_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Property_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/property.proto",
}
